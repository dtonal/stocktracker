# Production PostgreSQL (GCP Cloud SQL with Socket Factory)
# Die URL ist jetzt fast leer, da sie von der GCP-Bibliothek dynamisch erstellt wird.
spring.datasource.url=jdbc:postgresql://

# Diese werden von der GCP-Bibliothek verwendet
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.cloud.gcp.sql.instance-connection-name=${CLOUD_SQL_CONNECTION_NAME}
spring.cloud.gcp.sql.database-name=${DB_NAME}
# Die Datenbank-Credentials werden automatisch aus den Spring-Datasource-Properties übernommen.

# Production JPA (sicherer)
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Production Security Headers
server.error.include-message=never
server.error.include-binding-errors=never
server.error.include-stacktrace=never
server.error.include-exception=false

# Production Logging (weniger Details)
logging.level.root=WARN
logging.level.de.dtonal.stocktracker=INFO
logging.level.org.springframework.security=WARN

# Server Port (GCP bestimmt das)
server.port=${PORT:8080}

# Actuator für Health Checks (für GCP)
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when_authorized
management.endpoint.health.probes.enabled=true
management.health.db.enabled=false